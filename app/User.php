<?php

namespace App;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use function foo\func;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'first_name','last_name','user_type','number','pending', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::created(function ($user){
            $user->StudentProfile()->create();
        });
        static::created(function($user){
            $new = new StudentEducation();
            $new->create([
                "user_id" => $user->id,
                "department_id" => '',
                "in_ssc_hsc" => "",
                "percentage" =>"",
                "in_college" => "",
                "cgpa" => "",
                "current_sem" => ""
            ]);
        });
    }

    public function StudentEducation()
    {
        return $this->hasOne(StudentEducation::class);
    }
    public function studentprofile()
    {
        return $this->hasOne(StudentProfile::class);
    }
    public function RoomDetails()
    {
        return $this->hasMany(RoomDetails::class);
    }
    public  function StudentApply()
    {
        return $this->hasOne(StudentApply::class);
    }
    public function  ParentDetail()
    {
        return $this->hasOne(ParentDetail::class);
    }
    public  function MeritList()
    {
        return $this->hasOne(MeritList::class);
    }

    public function studentleave()
    {
        return $this->hasMany(StudentLeave::class);
    }
}
